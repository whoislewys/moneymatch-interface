/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Escrow {
  export type GameResultsStruct = {
    winnerId: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type GameResultsStructOutput = [string, string] & {
    winnerId: string;
    signature: string;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "claimWinnings()": FunctionFragment;
    "deposit(string)": FunctionFragment;
    "endGame((string,bytes))": FunctionFragment;
    "gameEnded()": FunctionFragment;
    "gameStarted()": FunctionFragment;
    "player1()": FunctionFragment;
    "player1BetAmount()": FunctionFragment;
    "player1BetBalance()": FunctionFragment;
    "player2()": FunctionFragment;
    "player2BetAmount()": FunctionFragment;
    "player2BetBalance()": FunctionFragment;
    "startGame()": FunctionFragment;
    "winner()": FunctionFragment;
    "winnings()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimWinnings"
      | "deposit"
      | "endGame"
      | "gameEnded"
      | "gameStarted"
      | "player1"
      | "player1BetAmount"
      | "player1BetBalance"
      | "player2"
      | "player2BetAmount"
      | "player2BetBalance"
      | "startGame"
      | "winner"
      | "winnings"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimWinnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [Escrow.GameResultsStruct]
  ): string;
  encodeFunctionData(functionFragment: "gameEnded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player1BetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player1BetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player2BetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player2BetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(functionFragment: "winnings", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameEnded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player1BetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player1BetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player2BetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player2BetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winnings", data: BytesLike): Result;

  events: {
    "GameEnded(address)": EventFragment;
    "GameStarted(address,string,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
}

export interface GameEndedEventObject {
  winner: string;
}
export type GameEndedEvent = TypedEvent<[string], GameEndedEventObject>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameStartedEventObject {
  player1Address: string;
  player1Id: string;
  player2Address: string;
  player2Id: string;
}
export type GameStartedEvent = TypedEvent<
  [string, string, string, string],
  GameStartedEventObject
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endGame(
      gameResults: Escrow.GameResultsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameEnded(overrides?: CallOverrides): Promise<[boolean]>;

    gameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    player1(
      overrides?: CallOverrides
    ): Promise<[string, string] & { id: string; publicAddress: string }>;

    player1BetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    player1BetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    player2(
      overrides?: CallOverrides
    ): Promise<[string, string] & { id: string; publicAddress: string }>;

    player2BetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    player2BetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winner(overrides?: CallOverrides): Promise<[string]>;

    winnings(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimWinnings(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _playerId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endGame(
    gameResults: Escrow.GameResultsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameEnded(overrides?: CallOverrides): Promise<boolean>;

  gameStarted(overrides?: CallOverrides): Promise<boolean>;

  player1(
    overrides?: CallOverrides
  ): Promise<[string, string] & { id: string; publicAddress: string }>;

  player1BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  player1BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  player2(
    overrides?: CallOverrides
  ): Promise<[string, string] & { id: string; publicAddress: string }>;

  player2BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  player2BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  startGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winner(overrides?: CallOverrides): Promise<string>;

  winnings(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimWinnings(overrides?: CallOverrides): Promise<void>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    endGame(
      gameResults: Escrow.GameResultsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    gameEnded(overrides?: CallOverrides): Promise<boolean>;

    gameStarted(overrides?: CallOverrides): Promise<boolean>;

    player1(
      overrides?: CallOverrides
    ): Promise<[string, string] & { id: string; publicAddress: string }>;

    player1BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    player1BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    player2(
      overrides?: CallOverrides
    ): Promise<[string, string] & { id: string; publicAddress: string }>;

    player2BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    player2BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    startGame(overrides?: CallOverrides): Promise<void>;

    winner(overrides?: CallOverrides): Promise<string>;

    winnings(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "GameEnded(address)"(winner?: null): GameEndedEventFilter;
    GameEnded(winner?: null): GameEndedEventFilter;

    "GameStarted(address,string,address,string)"(
      player1Address?: null,
      player1Id?: null,
      player2Address?: null,
      player2Id?: null
    ): GameStartedEventFilter;
    GameStarted(
      player1Address?: null,
      player1Id?: null,
      player2Address?: null,
      player2Id?: null
    ): GameStartedEventFilter;
  };

  estimateGas: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endGame(
      gameResults: Escrow.GameResultsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameEnded(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    player1(overrides?: CallOverrides): Promise<BigNumber>;

    player1BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    player1BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    player2(overrides?: CallOverrides): Promise<BigNumber>;

    player2BetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    player2BetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    winnings(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _playerId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endGame(
      gameResults: Escrow.GameResultsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player1BetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player1BetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player2BetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player2BetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnings(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
